grammar RobotController;
program: statement+;
statement: moveStatement | rotateStatement | loopStatement | logStatement | changeColorStatement | jumpStatement| clearStatement | movePixelsStatement | squareStatement | rotateDegreesStatement | circleStatement | jumpPixelsStatement | undoStatement;
moveStatement: MOVE EOS;
rotateStatement: ROTATE EOS;
loopStatement: LOOP (LPAREN INT RPAREN) LCURLY statement+ RCURLY;
logStatement: LOG (LPAREN STRING RPAREN)? EOS;
changeColorStatement: COLOR (LPAREN STRING RPAREN)? EOS;
jumpStatement: JUMP EOS;
clearStatement: CLEAR EOS;
undoStatement: UNDO EOS;
movePixelsStatement: MOVEPIXELS (LPAREN INT RPAREN) EOS;
jumpPixelsStatement: JUMPPIXELS (LPAREN INT RPAREN) EOS;
squareStatement: SQUARE (LPAREN INT RPAREN) EOS;
rotateDegreesStatement: ROTATEDEGREES (LPAREN INT RPAREN) EOS;
circleStatement: CIRCLE (LPAREN INT RPAREN) EOS;
MOVE: 'move';
JUMP: 'jump';
ROTATE: 'rotate';
LOOP: 'loop';
LOG: 'log';
COLOR: 'color';
UNDO: 'undo';
CLEAR: 'clear';
JUMPPIXELS: 'jump_p';
MOVEPIXELS: 'move_p';
SQUARE: 'square';
ROTATEDEGREES: 'rotate_d';
CIRCLE: 'circle';
LPAREN: '(';
RPAREN: ')';
LCURLY: '{';
RCURLY: '}';
INT: [0-9]+;
STRING: '"' (~[\r\n])* '"';
EOS: ';';
WS: (' '| '\t' | '\n' | '\r') -> skip;
COMMENT: '/*' .*? '*/' -> skip;
LINE_COMMENT: '//' ~[\r\n]* -> skip;
